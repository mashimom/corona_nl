plugins {
	id 'build-dashboard'
	id 'com.github.ben-manes.versions' version '0.33.0'
	id 'com.google.cloud.tools.jib' version '2.6.0'
	id 'com.gorylenko.gradle-git-properties' version '2.2.4'
	id 'com.palantir.git-version' version '0.12.3'
	id 'groovy'
	id 'idea'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'jacoco'
	id 'java'
	id 'nebula.maven-publish' version '17.0.0'
	id 'nebula.project' version '7.0.9'
	id 'org.asciidoctor.convert' version '2.4.0'
	id 'org.springframework.boot' version '2.3.4.RELEASE'
	id 'project-report'
}
apply plugin: 'nebula.facet'

defaultTasks 'clean', 'printVersion', 'classes', 'projectReport', 'buildDashboard', 'check', 'bootJar', 'publishToMavenLocal'

//noinspection GroovyAssignabilityCheck
group = 'com.github.mashimom'
//noinspection GroovyAssignabilityCheck
version gitVersion()
//noinspection GroovyUnusedAssignment
sourceCompatibility = '14'

springBoot {
	buildInfo()
}

facets {
	integrationTest {
		parentSourceSet = 'test'
		//noinspection GroovyAssignabilityCheck
		testTaskName = 'integrationTest'
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('springCloudVersion', "Hoxton.SR8")
}

dependencies {
	annotationProcessor 'org.projectlombok:lombok'

	compileOnly 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation 'org.jetbrains:annotations:20.1.0'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-mustache'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'
	implementation 'commons-codec:commons-codec:1.15'
	implementation 'org.springdoc:springdoc-openapi-ui:1.4.3'
	implementation 'com.codepoetics:protonpack:1.16'
	implementation 'uk.elementarysoftware:quick-csv-streamer:0.2.4'

	runtimeOnly 'com.h2database:h2'
	
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.codehaus.groovy:groovy-all:2.5.12'
	testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
	testImplementation 'org.spockframework:spock-spring:1.3-groovy-2.5'
	testImplementation 'org.hamcrest:hamcrest-core:1.3' // only necessary if Hamcrest matchers are used
	testImplementation 'com.jayway.jsonpath:json-path'
	testImplementation('com.athaydes:spock-reports:1.7.1') {
		transitive = false
	}

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	testRuntime 'cglib:cglib-nodep:3.1'          // allows mocking of classes (in addition to interfaces)
	testRuntime 'org.objenesis:objenesis:2.1'
	// allows mocking of classes without default constructor (together with CGLIB)

	integrationTestRuntime 'com.h2database:h2'

}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
	testLogging {
		events 'passed', 'skipped', 'failed'
	}
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: 'org/shimomoto/frostbite/model/*')
		}))
	}
	dependsOn test
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

jib.from.image = 'openjdk:14-jdk-alpine'
